package com.company.iendo.green.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.company.iendo.green.db.downcase.dwonmsg.DownVideoMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWN_VIDEO_MESSAGE".
*/
public class DownVideoMessageDao extends AbstractDao<DownVideoMessage, Long> {

    public static final String TABLENAME = "DOWN_VIDEO_MESSAGE";

    /**
     * Properties of entity DownVideoMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceCode = new Property(1, String.class, "DeviceCode", false, "DEVICE_CODE");
        public final static Property SaveCaseID = new Property(2, String.class, "saveCaseID", false, "SAVE_CASE_ID");
        public final static Property MaxProcess = new Property(3, Long.class, "maxProcess", false, "MAX_PROCESS");
        public final static Property Tag = new Property(4, String.class, "tag", false, "TAG");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
        public final static Property IsDown = new Property(6, Boolean.class, "isDown", false, "IS_DOWN");
    }


    public DownVideoMessageDao(DaoConfig config) {
        super(config);
    }
    
    public DownVideoMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWN_VIDEO_MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DEVICE_CODE\" TEXT," + // 1: DeviceCode
                "\"SAVE_CASE_ID\" TEXT," + // 2: saveCaseID
                "\"MAX_PROCESS\" INTEGER," + // 3: maxProcess
                "\"TAG\" TEXT," + // 4: tag
                "\"URL\" TEXT," + // 5: url
                "\"IS_DOWN\" INTEGER);"); // 6: isDown
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWN_VIDEO_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownVideoMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String DeviceCode = entity.getDeviceCode();
        if (DeviceCode != null) {
            stmt.bindString(2, DeviceCode);
        }
 
        String saveCaseID = entity.getSaveCaseID();
        if (saveCaseID != null) {
            stmt.bindString(3, saveCaseID);
        }
 
        Long maxProcess = entity.getMaxProcess();
        if (maxProcess != null) {
            stmt.bindLong(4, maxProcess);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(5, tag);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
 
        Boolean isDown = entity.getIsDown();
        if (isDown != null) {
            stmt.bindLong(7, isDown ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownVideoMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String DeviceCode = entity.getDeviceCode();
        if (DeviceCode != null) {
            stmt.bindString(2, DeviceCode);
        }
 
        String saveCaseID = entity.getSaveCaseID();
        if (saveCaseID != null) {
            stmt.bindString(3, saveCaseID);
        }
 
        Long maxProcess = entity.getMaxProcess();
        if (maxProcess != null) {
            stmt.bindLong(4, maxProcess);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(5, tag);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
 
        Boolean isDown = entity.getIsDown();
        if (isDown != null) {
            stmt.bindLong(7, isDown ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownVideoMessage readEntity(Cursor cursor, int offset) {
        DownVideoMessage entity = new DownVideoMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // DeviceCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // saveCaseID
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // maxProcess
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tag
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // url
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // isDown
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownVideoMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSaveCaseID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMaxProcess(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setTag(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsDown(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownVideoMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownVideoMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownVideoMessage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
