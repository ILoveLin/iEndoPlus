package com.company.iendo.green.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_DBBEAN".
*/
public class UserDBBeanDao extends AbstractDao<UserDBBean, Long> {

    public static final String TABLENAME = "USER_DBBEAN";

    /**
     * Properties of entity UserDBBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceID = new Property(1, String.class, "deviceID", false, "DEVICE_ID");
        public final static Property DeviceUserID = new Property(2, String.class, "deviceUserID", false, "DEVICE_USER_ID");
        public final static Property UserName = new Property(3, String.class, "UserName", false, "USER_NAME");
        public final static Property Password = new Property(4, String.class, "Password", false, "PASSWORD");
        public final static Property Relo = new Property(5, String.class, "relo", false, "RELO");
        public final static Property Make01 = new Property(6, String.class, "make01", false, "MAKE01");
        public final static Property Make02 = new Property(7, String.class, "make02", false, "MAKE02");
        public final static Property IsRememberPassword = new Property(8, Boolean.class, "isRememberPassword", false, "IS_REMEMBER_PASSWORD");
    }


    public UserDBBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserDBBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_DBBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DEVICE_ID\" TEXT," + // 1: deviceID
                "\"DEVICE_USER_ID\" TEXT," + // 2: deviceUserID
                "\"USER_NAME\" TEXT," + // 3: UserName
                "\"PASSWORD\" TEXT," + // 4: Password
                "\"RELO\" TEXT," + // 5: relo
                "\"MAKE01\" TEXT," + // 6: make01
                "\"MAKE02\" TEXT," + // 7: make02
                "\"IS_REMEMBER_PASSWORD\" INTEGER);"); // 8: isRememberPassword
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_DBBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserDBBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceID = entity.getDeviceID();
        if (deviceID != null) {
            stmt.bindString(2, deviceID);
        }
 
        String deviceUserID = entity.getDeviceUserID();
        if (deviceUserID != null) {
            stmt.bindString(3, deviceUserID);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(4, UserName);
        }
 
        String Password = entity.getPassword();
        if (Password != null) {
            stmt.bindString(5, Password);
        }
 
        String relo = entity.getRelo();
        if (relo != null) {
            stmt.bindString(6, relo);
        }
 
        String make01 = entity.getMake01();
        if (make01 != null) {
            stmt.bindString(7, make01);
        }
 
        String make02 = entity.getMake02();
        if (make02 != null) {
            stmt.bindString(8, make02);
        }
 
        Boolean isRememberPassword = entity.getIsRememberPassword();
        if (isRememberPassword != null) {
            stmt.bindLong(9, isRememberPassword ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserDBBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceID = entity.getDeviceID();
        if (deviceID != null) {
            stmt.bindString(2, deviceID);
        }
 
        String deviceUserID = entity.getDeviceUserID();
        if (deviceUserID != null) {
            stmt.bindString(3, deviceUserID);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(4, UserName);
        }
 
        String Password = entity.getPassword();
        if (Password != null) {
            stmt.bindString(5, Password);
        }
 
        String relo = entity.getRelo();
        if (relo != null) {
            stmt.bindString(6, relo);
        }
 
        String make01 = entity.getMake01();
        if (make01 != null) {
            stmt.bindString(7, make01);
        }
 
        String make02 = entity.getMake02();
        if (make02 != null) {
            stmt.bindString(8, make02);
        }
 
        Boolean isRememberPassword = entity.getIsRememberPassword();
        if (isRememberPassword != null) {
            stmt.bindLong(9, isRememberPassword ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserDBBean readEntity(Cursor cursor, int offset) {
        UserDBBean entity = new UserDBBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceUserID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // UserName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Password
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // relo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // make01
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // make02
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0 // isRememberPassword
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserDBBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceUserID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRelo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMake01(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMake02(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsRememberPassword(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserDBBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserDBBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserDBBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
